{"version":3,"sources":["utils/mathUtils.ts","components/Game.tsx","components/Score.tsx","components/App.tsx","index.tsx"],"names":["generateProblem","level","maxNumber","num1","Math","floor","random","num2","question","concat","answer","Game","_ref","onScoreUpdate","onGameEnd","problem","setProblem","useState","score","setScore","timeLeft","setTimeLeft","answers","setAnswers","useEffect","timer","setInterval","prevTime","clearInterval","generateAnswers","correctAnswer","wrongAnswers","Set","size","wrongAnswer","add","allAnswers","Array","from","push","shuffleArray","array","i","length","j","_jsxs","className","children","_jsx","map","index","onClick","selectedAnswer","newScore","handleAnswerClick","Score","message","stars","renderStars","starElements","App","setMessage","gameActive","setGameActive","setLevel","setStars","value","onChange","e","parseInt","target","handleGameEnd","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f66ec184.chunk.js","sourcesContent":["export const generateProblem = (level: number) => {\n  let maxNumber;\n  switch (level) {\n    case 1:\n      maxNumber = 10;\n      break;\n    case 2:\n      maxNumber = 20;\n      break;\n    case 3:\n      maxNumber = 50;\n      break;\n    default:\n      maxNumber = 10;\n  }\n\n  const num1 = Math.floor(Math.random() * maxNumber);\n  const num2 = Math.floor(Math.random() * maxNumber);\n  const question = `${num1} + ${num2}`;\n  const answer = num1 + num2;\n  return { question, answer };\n};\n\nexport function checkAnswer(userAnswer: number, correctAnswer: number): boolean {\n    return userAnswer === correctAnswer;\n}","import React, { useState, useEffect } from 'react';\nimport { generateProblem } from '../utils/mathUtils';\n\ninterface GameProps {\n  level: number;\n  onScoreUpdate: (newScore: number) => void;\n  onGameEnd: () => void;\n}\n\n/**\n * Game component represents the main game logic and UI for a math game.\n * It manages the game state including the current problem, score, time left, and possible answers.\n * The component receives level, onScoreUpdate, and onGameEnd as props to control the game flow.\n *\n * @param {GameProps} props - The properties passed to the component.\n * @param {number} props.level - The difficulty level of the game.\n * @param {function} props.onScoreUpdate - Callback function to update the score.\n * @param {function} props.onGameEnd - Callback function to handle game end.\n * @returns {JSX.Element} The rendered game UI.\n */\nconst Game: React.FC<GameProps> = ({ level, onScoreUpdate, onGameEnd }) => {\n  const [problem, setProblem] = useState(generateProblem(level));\n  const [score, setScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [answers, setAnswers] = useState<number[]>([]);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft((prevTime) => {\n        if (prevTime <= 1) {\n          clearInterval(timer);\n          onGameEnd();\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [onGameEnd]);\n\n  useEffect(() => {\n    generateAnswers();\n  }, [problem]);\n\n  const generateAnswers = () => {\n    const correctAnswer = problem.answer;\n    const wrongAnswers = new Set<number>();\n    while (wrongAnswers.size < 3) {\n      const wrongAnswer = Math.floor(Math.random() * (level * 20));\n      if (wrongAnswer !== correctAnswer) {\n        wrongAnswers.add(wrongAnswer);\n      }\n    }\n    const allAnswers = Array.from(wrongAnswers);\n    allAnswers.push(correctAnswer);\n    setAnswers(shuffleArray(allAnswers));\n  };\n\n  const shuffleArray = (array: number[]) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  const handleAnswerClick = (selectedAnswer: number) => {\n    if (selectedAnswer === problem.answer) {\n      const newScore = score + 1;\n      setScore(newScore);\n      onScoreUpdate(newScore);\n      setProblem(generateProblem(level));\n    } else {\n      onGameEnd();\n    }\n  };\n\n  return (\n    <div className=\"game\">\n      <p>{problem.question}</p>\n      <p>剩余时间: {timeLeft}秒</p>\n      <div className=\"answers\">\n        {answers.map((answer, index) => (\n          <button key={index} onClick={() => handleAnswerClick(answer)}>\n            {answer}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;","import React from 'react';\n\ninterface ScoreProps {\n  score: number;\n  message: string;\n  stars: number;\n}\n\nconst Score: React.FC<ScoreProps> = ({ score, message, stars }) => {\n  const renderStars = () => {\n    let starElements = [];\n    for (let i = 0; i < stars; i++) {\n      starElements.push(<span key={i} className=\"star\">⭐</span>);\n    }\n    return starElements;\n  };\n\n  return (\n    <div className=\"score\">\n      <p>{message}</p>\n      <p>分数: {score}</p>\n      <div className=\"stars\">\n        {renderStars()}\n      </div>\n    </div>\n  );\n};\n\nexport default Score;","import React, { useState } from 'react';\nimport Game from './Game';\nimport Score from './Score';\nimport \"../assets/styles.css\";\n\n/**\n * App component is the main component of the math game application.\n * It manages the game state including score, message, game activity, level, and stars.\n * It renders a selection for game levels, the Game component during active game play,\n * and the Score component when the game ends. It also provides a button to restart the game.\n *\n * @returns {JSX.Element} The JSX element representing the App component.\n */\nconst App: React.FC = () => {\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"游戏结束!\");\n  const [gameActive, setGameActive] = useState(true);\n  const [level, setLevel] = useState(1);\n  const [stars, setStars] = useState(0);\n\n  const handleScoreUpdate = (newScore: number) => {\n    setScore(newScore);\n  };\n\n  const handleGameEnd = () => {\n    setGameActive(false);\n  };\n\n  const handleLevelChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setLevel(parseInt(e.target.value));\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>算术先锋</h1>\n      <label>\n        选择级别:\n        <select value={level} onChange={handleLevelChange}>\n          <option value={1}>简单</option>\n          <option value={2}>中等</option>\n          <option value={3}>困难</option>\n        </select>\n      </label>\n      {gameActive ? (\n        <Game\n          level={level}\n          onScoreUpdate={handleScoreUpdate}\n          onGameEnd={handleGameEnd}\n        />\n      ) : (\n        <Score score={score} message={message} stars={stars} />\n      )}\n      <button\n        onClick={() => {\n          setGameActive(true);\n          setScore(0);\n        }}\n      >\n        重新开始\n      </button>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './assets/styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}